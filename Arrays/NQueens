/*
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],
        ["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

 */
class Solution {
public:
    bool check(int row,int col,vector<string>& temp){
        int i=row;
        int j=col;
        while(j>=0){
            if(temp[i][j]=='Q'){
                return false;
            }
            j--;
        }
        i=row;
        j=col;
        while(i>=0){
            if(temp[i][j]=='Q'){
                return false;
            }
            i--;
        }
        i=row;
        j=col;
        while(i>=0 && j>=0){
            if(temp[i][j]=='Q'){
                return false;
            }
            i--;
            j--;
        }
        i=row;
        j=col;
        while(i>=0 && j<temp.size()){
            if(temp[i][j]=='Q'){
                return false;
            }
            i--;
            j++;
        }
        return true;
    }
    void helper(int row,vector<string>& temp,vector<vector<string>>& ans,int n){
        if(row==n){
            ans.push_back(temp);
            return;
        }
        for(int col=0;col<n;col++){
            if(check(row,col,temp)){
                temp[row][col] = 'Q';
                helper(row+1,temp,ans,n);
                temp[row][col] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> temp;
        for(int i=0;i<n;i++){
            string s = "";
            for(int j=0;j<n;j++){
                s+='.';
            }
            temp.push_back(s);
        }
        helper(0,temp,ans,n);
        return ans;
    }
};