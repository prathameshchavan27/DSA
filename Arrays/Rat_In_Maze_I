class Solution{
    public:
    vector<string> ans;
    void helper(int row,int col,string s,vector<vector<int>> &m, int n,vector<vector<bool>>& visited){
        if(row==n-1 && col==n-1){
            ans.push_back(s);
            return;
        }
        //down
        if(row+1<n && m[row+1][col]==1 && !visited[row+1][col]){
            visited[row][col]=true;
            helper(row+1,col,s+'D',m,n,visited);
            visited[row][col]=false;
        }
        //left
        if(col-1>=0 && m[row][col-1]==1 && !visited[row][col-1]){
            visited[row][col]=true;
            helper(row,col-1,s+'L',m,n,visited);
            visited[row][col]=false;
        }
        //right
        if(col+1<n && m[row][col+1]==1 && !visited[row][col+1]){
            visited[row][col]=true;
            helper(row,col+1,s+'R',m,n,visited);
            visited[row][col]=false;
        }
        //up
        if(row-1>=0 && m[row-1][col]==1 && !visited[row-1][col]){
            visited[row][col]=true;
            helper(row-1,col,s+'U',m,n,visited);
            visited[row][col]=false;
        }
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        if(m[0][0]==0){
            return ans;
        }
        string s="";
        vector<vector<bool>> visited;
        for(int i=0;i<n;i++){
            vector<bool> temp;
            for(int j=0;j<n;j++){
                temp.push_back(0);
            }
            visited.push_back(temp);
        }
        helper(0,0,s,m,n,visited);
        return ans;
    }
};

    

